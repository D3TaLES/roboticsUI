# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import re
import sys
from robotics_api import __version__, __credits__, __author__
from docutils import nodes
from docutils.parsers.rst import Directive
from sphinx.util.docutils import SphinxDirective
from markdown_it import MarkdownIt
sys.path.insert(0, '../../')


# -- Project information -----------------------------------------------------

project = 'D3TaLES Robotics'
copyright = __credits__
author = __author__

# The short X.Y version
version = __version__

# The full version, including alpha/beta/rc tags
release = __version__

html_favicon = "media/D3TaLES_logo_transparent_robotics.ico"


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.todo',
    'sphinx_rtd_theme',
    'sphinx.ext.githubpages',
    # 'recommonmark',
    'sphinx.ext.napoleon',
    'myst_parser',
    "sphinx.ext.autosectionlabel"
]


class CheckboxList(SphinxDirective):
    """Custom directive to create checkboxes in lists, while keeping Markdown formatting."""
    has_content = True

    def run(self):
        # Create a container to hold the resulting content
        container = nodes.container()

        # Initialize MarkdownIt to process markdown syntax
        md = MarkdownIt()

        # Placeholder for storing processed content
        processed_content = []

        for item in self.content:
            item = item.strip()

            # Preserve the ref links temporarily by using placeholders
            item = re.sub(r'(\{ref:[^\}]+\})', r'__REF_\1__', item)

            # Check if the item is a list item (starting with '*' or '-')
            if item.startswith(("*", "-")):
                checkbox_item = f'<input type="checkbox"> {item[2:].strip()}<br>'
                processed_content.append(checkbox_item)
            else:
                # For non-list items, keep the content as is (preserving links, etc.)
                processed_content.append(item)

        # Join the processed content into a single string
        content_to_render = "\n".join(processed_content)

        # Render the content using Markdown-it
        rendered_html = md.render(content_to_render)

        # Replace the placeholder ref links back to the original {ref} format
        rendered_html = re.sub(r'__REF_\{ref:([^\}]+)\}__', r'{ref:\1}', rendered_html)

        # Add the processed HTML to the container
        checkbox_node = nodes.raw('', rendered_html, format='html')
        container += checkbox_node

        return [container]


def skip(app, what, name, obj, would_skip, options):
    if name == "__init__":
        return False
    if name == "settings":
        return False
    return would_skip


def setup(app):
    app.connect("autodoc-skip-member", skip)
    app.add_directive("checkbox-list", CheckboxList)


# Make sure the target is unique
autosectionlabel_prefix_document = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'tests']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_js_files = ['checklist.js']

# -- Extension configuration -------------------------------------------------

source_suffix = [
    ".md",
    ".rst"
]
